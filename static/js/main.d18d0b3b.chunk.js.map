{"version":3,"sources":["components/InfoBox.js","components/LineGraph.js","components/Table.js","utils/utils.js","components/Map.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","className","onClick","CardContent","Typography","color","options","legend","display","elements","point","radius","maintainAspectRation","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","a","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","Table","countries","allCountries","map","country","todayCases","deaths","todayDeaths","recovered","todayRecovered","critical","casesPerOneMillion","deathsPerOneMillion","tests","testsPerOneMillion","population","pettyPrintStat","stat","sortData","sort","b","casesTypeColors","hex","multiplier","Map","center","zoom","TileLayer","attribution","url","Circle","countryInfo","lat","long","fillOpacity","fillColor","Math","sqrt","Popup","src","flag","alt","App","setInputCountry","setCountryInfo","setCountries","mapCountries","setMapCountries","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","getCountriesData","name","iso2","sortedData","onCountryChange","e","countryCode","target","getAllCountries","FormControl","Select","variant","onChange","MenuItem","style","marginTop","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d18d0b3b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\n\r\nfunction InfoBox({ title, cases, isRed, active, total, ...props }) {\r\n  return (\r\n    <Card\r\n      className={`infoBox ${active && \"infoBox__selected\"} ${isRed && 'infoBox__red'}`}\r\n      onClick={props.onClick}\r\n    >\r\n      <CardContent>\r\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n          {title}\r\n        </Typography>\r\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRation: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  const chartData = [];\r\n  let lastDataPoint;\r\n\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType, ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=30\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          //console.log(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries, allCountries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      <thead className=\"table__top\">\r\n        <td>Country</td>\r\n        <td>Total cases</td>\r\n        <td>New cases</td>\r\n        <td>Total deaths</td>\r\n        <td>New deaths</td>\r\n        <td>Total recovered</td>\r\n        <td>New recovered</td>\r\n        <td>Active Cases</td>\r\n        <td>Critical</td>\r\n        <td>Total cases/ 1M pop</td>\r\n        <td>Deaths/ 1M pop</td>\r\n        <td>Total tests</td>\r\n        <td>Tests/ 1M pop</td>\r\n        <td>Population</td>\r\n        <td></td>\r\n      </thead>\r\n      {countries.map(\r\n        ({\r\n          country,\r\n          cases,\r\n          todayCases,\r\n          deaths,\r\n          todayDeaths,\r\n          recovered,\r\n          todayRecovered,\r\n          active,\r\n          critical,\r\n          casesPerOneMillion,\r\n          deathsPerOneMillion,\r\n          tests,\r\n          testsPerOneMillion,\r\n          population,\r\n        }) => (\r\n          <tr>\r\n            <td>{country}</td>\r\n            <td>{numeral(cases).format(\"0,0\")}</td>\r\n            <td className={todayCases > 0 ? \"today__cases\" : null}>\r\n              {todayCases !== 0\r\n                ? `+${numeral(todayCases).format(\"0,0\")}`\r\n                : null}\r\n            </td>\r\n            <td>{deaths !== 0 ? numeral(deaths).format(\"0,0\") : null}</td>\r\n            <td className={todayDeaths > 0 ? \"today__deaths\" : null}>\r\n              {todayDeaths !== 0\r\n                ? `+${numeral(todayDeaths).format(\"0,0\")}`\r\n                : null}\r\n            </td>\r\n            <td>{recovered !== 0 ? numeral(recovered).format(\"0,0\") : null}</td>\r\n            <td className={todayRecovered > 0 ? \"today__recovered\" : null}>\r\n              {todayRecovered !== 0\r\n                ? `+${numeral(todayRecovered).format(\"0,0\")}`\r\n                : null}\r\n            </td>\r\n            <td>{active !== 0 ? numeral(active).format(\"0,0\") : null}</td>\r\n            <td>{critical !== 0 ? numeral(critical).format(\"0,0\") : null}</td>\r\n            <td>\r\n              {casesPerOneMillion !== 0\r\n                ? numeral(casesPerOneMillion).format(\"0,0\")\r\n                : null}\r\n            </td>\r\n            <td>\r\n              {deathsPerOneMillion !== 0\r\n                ? numeral(deathsPerOneMillion).format(\"0,0\")\r\n                : null}\r\n            </td>\r\n            <td>{tests !== 0 ? numeral(tests).format(\"0,0\") : null}</td>\r\n            <td>\r\n              {testsPerOneMillion !== 0\r\n                ? numeral(testsPerOneMillion).format(\"0,0\")\r\n                : null}\r\n            </td>\r\n            <td>\r\n              {population !== 0 ? numeral(population).format(\"0,0\") : null}\r\n            </td>\r\n          </tr>\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import numeral from \"numeral\";\r\n\r\nexport const pettyPrintStat = (stat) => \r\n  stat ? `+${numeral(stat).format('0,0')}` : '+0';\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n\r\n  return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n};\r\n\r\n// draw circles on the map with interactive tooltip\r\n\r\n","import React from \"react\";\r\nimport { Map as MapContainer, TileLayer, Circle, Popup } from \"react-leaflet\";\r\nimport numeral from 'numeral';\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    multiplier: 120,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    multiplier: 120,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <MapContainer center={center} zoom={zoom}>\r\n        <TileLayer\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        {/* Loop throught countries and draw circles on the screen */}\r\n        {countries.map((country) => (\r\n          <Circle\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            fillOpacity={0.4}\r\n            color={casesTypeColors[casesType].hex}\r\n            fillColor={casesTypeColors[casesType].hex}\r\n            radius={\r\n              Math.sqrt(country[casesType]) *\r\n              casesTypeColors[casesType].multiplier\r\n            }\r\n          >\r\n            <Popup>\r\n              <div className=\"info__container\">\r\n                <div className=\"info__flag\">\r\n                  <img src={country.countryInfo.flag} alt={country.country} />\r\n                </div>\r\n                <div className=\"info__name\">{country.country}</div>\r\n                <div className=\"info__confirmed\">\r\n                  Cases: {numeral(country.cases).format(\"0,0\")}\r\n                </div>\r\n                <div className=\"info__recovered\">\r\n                  Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n                </div>\r\n                <div className=\"info__deaths\">\r\n                  Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n                </div>\r\n              </div>\r\n            </Popup>\r\n          </Circle>\r\n        ))}\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React, { useState, useEffect } from \"react\";\nimport {\n  FormControl,\n  MenuItem,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport \"./App.css\";\n\nimport InfoBox from \"./components/InfoBox\";\nimport LineGraph from \"./components/LineGraph\";\nimport Table from \"./components/Table\";\nimport { pettyPrintStat, sortData } from \"./utils/utils\";\nimport numeral from 'numeral';\nimport Map from \"./components/Map\";\nimport \"leaflet/dist/leaflet.css\";\n\n// https://disease.sh/v3/covid-19/countries\n\nfunction App() {\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 0, lng: 0 });\n  const [mapZoom, setMapZoom] = useState(3);\n\n  const getCountriesData = async () => {\n    await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) => {\n        const countries = data.map((country) => ({\n          name: country.country, // United States\n          value: country.countryInfo.iso2, // USA\n        }));\n\n        let sortedData = sortData(data);\n        setCountries(countries);\n        setMapCountries(data);\n        setTableData(sortedData);\n      });\n  };\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n      ? \"https://disease.sh/v3/covid-19/all\"\n      : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountry(countryCode);\n        // All of the data from the country response\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n\n  const getAllCountries = async () => {\n    await fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }\n\n  useEffect(() => {\n    getAllCountries();\n    getCountriesData();\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        {/* Header */}\n        {/* Title + Select input dropdown field */}\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <h2>Updated: {  }</h2>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n            >\n              {/* Loop thought all the countries and show a drop down */}\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        {/* InfoBoxs */}\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed\n            active={casesType === 'cases'}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            cases={pettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format('0,0')}\n          />\n\n          <InfoBox\n            active={casesType === 'recovered'}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            cases={pettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format('0,0')}\n          />\n\n          <InfoBox\n            isRed\n            active={casesType === 'deaths'}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={pettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format('0,0')}\n          />\n        </div>\n\n        {/* Map */}\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n\n      <Card className=\"app__right\">\n        <CardContent className=\"app__right--border\" >\n          {/* Table */}\n          <h3 className=\"app__graphTitle\" style={{ marginTop: \"1rem\" }}>Wordwide new {casesType}</h3>\n          <LineGraph className=\"app__graph\" casesType={casesType} />\n          <h3 style={{ marginTop: '20px' }}>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          {/* Graph */}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}